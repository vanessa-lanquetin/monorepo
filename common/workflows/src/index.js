const walker = require('./walker')
const fs = require('fs')
const pathfs = require('path')
const root = pathfs.resolve(__dirname, '..', '..', '..')
const githubRoot = pathfs.resolve(root, '.github')
const workflowsRoot = pathfs.resolve(githubRoot, 'workflows')

const workflowTemplateMobilePath = pathfs.resolve(githubRoot, 'workflow-template-mobile.yml')
const workflowTemplateMobile = fs.readFileSync(workflowTemplateMobilePath, 'utf-8')

const workflowTemplateDockerPath = pathfs.resolve(githubRoot, 'workflow-template-docker.yml')
const workflowTemplateDocker = fs.readFileSync(workflowTemplateDockerPath, 'utf-8')

const workflowTemplateTestPath = pathfs.resolve(githubRoot, 'workflow-template-test.yml')
const workflowTemplateTest = fs.readFileSync(workflowTemplateTestPath, 'utf-8')

// const workflowTemplateDeployPath = pathfs.resolve(githubRoot, 'workflow-template-deploy.yml')
// const workflowTemplateDeploy = fs.readFileSync(workflowTemplateDeployPath, 'utf-8')

let prependText = `
# Autogenerated by @vanessa-lanquetin/common-workflows package
# If you must edit this file, edit files in .github/workflow-*.yml
# Then launch "yarn ci:generate"

`

  ; (async _ => {
  const files = await walker.import({ paths: ['.'] })
  await generateTestWorkflows(files)
  // await generateDeployWorkflows(files)
  await generateDockerWorkflows(files)
  await generateCapacitorWorkflows(files)
})()
// async function generateDeployWorkflows(files) {
//   let workflow = workflowTemplateDeploy
//   workflow = prependText + workflow
//   fs.writeFileSync(pathfs.join(workflowsRoot, `all-deploy.yml`), workflow)
// }

async function generateTestWorkflows(files) {
  let workflow = workflowTemplateTest
  workflow = prependText + workflow
  fs.writeFileSync(pathfs.join(workflowsRoot, `all-test.yml`), workflow)
}
async function generateDockerWorkflows(files) {
  const dockerfiles = files.filter(file => file.includes('Dockerfile'))
  dockerfiles.forEach((dockerfilePath) => {
    const LOCATION = pathfs.dirname(dockerfilePath).split(root).join('').split(pathfs.sep).filter(a => a).join('/')
    const NAME_ROUTE = pathfs.dirname(dockerfilePath).split(root).join('').split(pathfs.sep).filter(a => a).join('-')
    let workflow = workflowTemplateDocker
      .replaceAll(/{{LOCATION}}/gi, LOCATION)
      .replaceAll(/{{NAME_ROUTE}}/gi, NAME_ROUTE)
    workflow = prependText + workflow
    fs.writeFileSync(pathfs.join(workflowsRoot, `${NAME_ROUTE}-docker.yml`), workflow)
  })
}

async function generateCapacitorWorkflows(files) {
  const capacitorProjects = files.filter(file => file.includes('capacitor.config.json') && !file.includes('android/app'))
  capacitorProjects.forEach((capacitorConfPath) => {
    const LOCATION = pathfs.dirname(capacitorConfPath).split(root).join('').split(pathfs.sep).filter(a => a).join('/')
    const NAME_ROUTE = pathfs.dirname(capacitorConfPath).split(root).join('').split(pathfs.sep).filter(a => a).join('-')
    const APPID = JSON.parse(fs.readFileSync(pathfs.resolve(pathfs.dirname(capacitorConfPath), 'package.json'), 'utf-8')).publishAppID
    if (!APPID) {
      console.error(NAME_ROUTE, ': You should add "publishAppID" field to package.json, this is the id of your app in appstore.vanessa-lanquetin.fr')
      process.exit(1)
    }
    let workflow = workflowTemplateMobile
      .replaceAll(/{{LOCATION}}/gi, LOCATION)
      .replaceAll(/{{NAME_ROUTE}}/gi, NAME_ROUTE)
      .replaceAll(/{{APPID}}/gi, APPID)
    workflow = prependText + workflow
    fs.writeFileSync(pathfs.join(workflowsRoot, `${NAME_ROUTE}-mobile.yml`), workflow)
  })
}