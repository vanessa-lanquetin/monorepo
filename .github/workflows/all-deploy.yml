
# Autogenerated by @addworking/common-workflows package
# If you must edit this file, edit files in .github/workflow-*.yml
# Then launch "yarn ci:generate"

name: Release

on:
  push:
    branches: 
      - master
      - develop
      - staging

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    outputs:
      changed: ${{ steps.changes.outputs.changed }}
      versionType: ${{ steps.version.outputs.type }}
      lerna: ${{ steps.lerna.outputs.lernaJson }}
    steps:
    - name: "Checkout ${{ github.ref_name }}"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # - name: Setup Node.js environment
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: 20
    #     registry-url: 'https://npm.pkg.github.com/'
    #     cache: 'yarn'

    # - name: Ensure access
    #   run: npm whoami --registry https://npm.pkg.github.com/
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Config git user
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    # - name: Install dependencies
    #   run: yarn install --immutable

    # - name: Lint
    #   run: yarn run lint

    # - name: Tests
    #   run: yarn run test

    # - name: Build
    #   run: yarn run build

    - id: changes
      name: "Export list of package has changed"
      run: |
        if [ ${GITHUB_REF##*/} = develop ]; then
          echo -n changed=$(yarn dlx -q turbo test --filter="...[v.dev]" --dry-run=json | jq -c '.packages') >> $GITHUB_OUTPUT
        elif [ ${GITHUB_REF##*/} = staging ]; then
          echo -n changed=$(yarn dlx -q turbo test --filter="...[v.staging]" --dry-run=json | jq -c '.packages') >> $GITHUB_OUTPUT
        else
          echo -n changed=$(yarn dlx -q turbo test --filter="...[v.latest]" --dry-run=json | jq -c '.packages') >> $GITHUB_OUTPUT
        fi

    - name: "Print changes"
      run: echo "${{steps.changes.outputs.changed}}"

    - name: "Version and publish ${{github.ref_name}}"
      id: version
      env:
        GH_TOKEN: ${{ secrets.NPM_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor}}@users.noreply.github.com"

        if [ ${GITHUB_REF##*/} = develop ]; then
          git tag -fa v.dev -m "fix: set v.dev tag"
          git push -f --tags
          echo "type=dev" >> $GITHUB_OUTPUT
        elif [ ${GITHUB_REF##*/} = staging ]; then
          git tag -fa v.staging -m "fix: set v.staging tag"
          git push -f --tags
          echo "type=staging" >> $GITHUB_OUTPUT
        else
          npx lerna version --conventional-commits --conventional-graduate --yes
          npx lerna publish from-git --yes --registry https://npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }} --force-publish
          git tag -fa v.latest -m "fix: set v.latest tag"
          git push -f --tags
          echo "type=latest" >> $GITHUB_OUTPUT
        fi

    - id: lerna
      name: Export lerna config
      run: |
        echo lernaJson=$(cat lerna.json) >> $GITHUB_OUTPUT

  meteo-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    if: contains(needs.publish.outputs.changed, 'meteo')
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'

      - run: mkdir -p .yarn/cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.NPM_TOKEN }}

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat meteo/package.json) >> $GITHUB_OUTPUT

      - name: Publish ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: meteo/Dockerfile
          tags: | 
            ghcr.io/clabroche/docker-registry/meteo:${{ github.ref_name }} 
          push: true
          build-args: |
            NPM_TOKEN=${{secrets.NPM_TOKEN}}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Publish Latest ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'master')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: meteo/Dockerfile
          tags: | 
            ghcr.io/clabroche/docker-registry/meteo:latest
            ghcr.io/clabroche/docker-registry/meteo:${{fromJson(steps.package-json.outputs.packageJson).version}}
          push: true
          build-args: |
            NPM_TOKEN=${{secrets.NPM_TOKEN}}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Deploy to Coolify
        if: hashFiles('meteo/.coolify.json') != ''
        run: |
          ROOT_LOCATION=$(pwd)
          cd meteo && COOLIFY_URL="${{secrets.COOLIFY_URL}}" COOLIFY_APIKEY="${{secrets.COOLIFY_APIKEY}}" DOCKER_IMAGE=ghcr.io/clabroche/docker-registry/meteo ENVIRONMENT="${{ github.ref_name }}" node $ROOT_LOCATION/common/coolify/src/cli.js

  todolist-front-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    if: contains(needs.publish.outputs.changed, 'todolist-front')
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'

      - run: mkdir -p .yarn/cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.NPM_TOKEN }}

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat todolist/front/package.json) >> $GITHUB_OUTPUT

      - name: Publish ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: todolist/front/Dockerfile
          tags: | 
            ghcr.io/clabroche/docker-registry/todolist-front:${{ github.ref_name }} 
          push: true
          build-args: |
            NPM_TOKEN=${{secrets.NPM_TOKEN}}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Publish Latest ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'master')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: todolist/front/Dockerfile
          tags: | 
            ghcr.io/clabroche/docker-registry/todolist-front:latest
            ghcr.io/clabroche/docker-registry/todolist-front:${{fromJson(steps.package-json.outputs.packageJson).version}}
          push: true
          build-args: |
            NPM_TOKEN=${{secrets.NPM_TOKEN}}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Deploy to Coolify
        if: hashFiles('todolist/front/.coolify.json') != ''
        run: |
          ROOT_LOCATION=$(pwd)
          cd todolist/front && COOLIFY_URL="${{secrets.COOLIFY_URL}}" COOLIFY_APIKEY="${{secrets.COOLIFY_APIKEY}}" DOCKER_IMAGE=ghcr.io/clabroche/docker-registry/todolist-front ENVIRONMENT="${{ github.ref_name }}" node $ROOT_LOCATION/common/coolify/src/cli.js

  todolist-server-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    if: contains(needs.publish.outputs.changed, 'todolist-server')
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'

      - run: mkdir -p .yarn/cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.NPM_TOKEN }}

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat todolist/server/package.json) >> $GITHUB_OUTPUT

      - name: Publish ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: todolist/server/Dockerfile
          tags: | 
            ghcr.io/clabroche/docker-registry/todolist-server:${{ github.ref_name }} 
          push: true
          build-args: |
            NPM_TOKEN=${{secrets.NPM_TOKEN}}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Publish Latest ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'master')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: todolist/server/Dockerfile
          tags: | 
            ghcr.io/clabroche/docker-registry/todolist-server:latest
            ghcr.io/clabroche/docker-registry/todolist-server:${{fromJson(steps.package-json.outputs.packageJson).version}}
          push: true
          build-args: |
            NPM_TOKEN=${{secrets.NPM_TOKEN}}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Deploy to Coolify
        if: hashFiles('todolist/server/.coolify.json') != ''
        run: |
          ROOT_LOCATION=$(pwd)
          cd todolist/server && COOLIFY_URL="${{secrets.COOLIFY_URL}}" COOLIFY_APIKEY="${{secrets.COOLIFY_APIKEY}}" DOCKER_IMAGE=ghcr.io/clabroche/docker-registry/todolist-server ENVIRONMENT="${{ github.ref_name }}" node $ROOT_LOCATION/common/coolify/src/cli.js
  mobile-todolist-front:
    needs: [publish]
    if: contains(needs.publish.outputs.changed, 'todolist-front')
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat todolist/front/package.json) >> $GITHUB_OUTPUT

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'
          cache: 'yarn'

      - name: insert credentials
        run: | 
          echo -e "\n//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
          echo -e "\n@clabroche:registry=https://npm.pkg.github.com" >> .npmrc

      - name: Ensure access
        run: npm whoami --registry https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: yarn workspaces focus @clabroche/todolist-front @clabroche/monorepo

      - name: Build
        run: npm run build -- --filter=@clabroche/todolist-front

      - name: Sync capacitor
        working-directory: todolist/front
        run: yarn cap sync

      - name: Extract Android signing key from env
        working-directory: todolist/front
        run: |
          echo "${{ secrets.KEY_STORE_FILE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Temp fix stripe
        run: |
          ([ -f node_modules/@capacitor-community/stripe-terminal/android/src/main/java/com/getcapacitor/community/stripe/terminal/StripeTerminalPlugin.java ] && cp ./sophiemairy.fr/front/fix-stripe/StripeTerminalPlugin.java node_modules/@capacitor-community/stripe-terminal/android/src/main/java/com/getcapacitor/community/stripe/terminal/StripeTerminalPlugin.java) || echo "no action"
      - name: Build APK
        working-directory: todolist/front
        run: |
          cd android
          sh ./gradlew assembleRelease
      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION
      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK
        id: sign_app
        with:
          releaseDirectory: todolist/front/android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEY_STORE_FILE }}
          alias: ${{ secrets.KEY_STORE_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      - name: 'Upload APK stable ${{fromJson(steps.package-json.outputs.packageJson).version}}'
        if: contains(github.ref_name, 'master')
        run: |
          curl -X POST -H "authorization: ${{ secrets.JWT_PRIVATE_KEY }}" -F file=@${{steps.sign_app.outputs.signedReleaseFile}} -F version=${{fromJson(steps.package-json.outputs.packageJson).version}} https://appstore-core.corentinlabroche.fr/api/apps/648d19e43914ca64208043c7/upload --fail


      - name: 'Upload APK prerelease ${{fromJson(steps.package-json.outputs.packageJson).version}}'
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        run: |
          curl -X POST -H "authorization: ${{ secrets.JWT_PRIVATE_KEY }}" -F file=@${{steps.sign_app.outputs.signedReleaseFile}} -F version=${{fromJson(steps.package-json.outputs.packageJson).version}}-${{github.ref_name}} https://appstore-core.corentinlabroche.fr/api/apps/648d19e43914ca64208043c7/upload --fail


